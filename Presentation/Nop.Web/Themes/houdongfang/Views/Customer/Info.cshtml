@model CustomerInfoModel
@using Nop.Web.Models.Customer;
@using Nop.Core;
@{
    Layout = "~/Themes/houdongfang/Views/Shared/_ColumnsTwo.cshtml";

    //title
    Html.AddTitleParts(T("PageTitle.Account").Text);
}
@section left
{
    @Html.Partial("MyAccountNavigation", Model.NavigationModel, new ViewDataDictionary())
}
@if (Model.CountryEnabled && Model.StateProvinceEnabled)
{
    <script type="text/javascript">
        $(function () {
            $("#@Html.FieldIdFor(model => model.CountryId)").change(function () {
                var selectedItem = $(this).val();
                var ddlStates = $("#@Html.FieldIdFor(model => model.StateProvinceId)");
             var statesProgress = $("#states-loading-progress");
             statesProgress.show();
             $.ajax({
                 cache: false,
                 type: "GET",
                 url: "@(Url.RouteUrl("GetStatesByCountryId"))",
                    data: { "countryId": selectedItem, "addEmptyStateIfRequired": "true" },
                    success: function (data) {
                        ddlStates.html('');
                        $.each(data, function (id, option) {
                            ddlStates.append($('<option></option>').val(option.id).html(option.name));
                        });
                        statesProgress.hide();
                    },
                    error: function (xhr, ajaxOptions, thrownError) {
                        alert('Failed to retrieve states.');
                        statesProgress.hide();
                    }
                });
            });
        });
    </script>
}
<div class="profile_slidebar_right">
    <div class="profile_slidebar_right2">
        @using (Html.BeginForm())
        {
            @Html.AntiForgeryToken()
            <div class="checkout_title">
                @T("Account.YourPersonalDetails")
                <label />
            </div>
            <div class="message-error">
                @Html.ValidationSummary(true)
            </div>
            <div class="form-fields">
                @if (Model.GenderEnabled)
                        {
                <div class="profile_cmb1">
                    <label class="profile_cmb1_left">@T("Account.Fields.Gender"):</label>
                    @Html.RadioButton("Gender", "M", (Model.Gender == "M"), new { id = "gender-male" })
                    <label class="forcheckbox" for="gender-male">@T("Account.Fields.Gender.Male")</label>
                    @Html.RadioButton("Gender", "F", (Model.Gender == "F"), new { id = "gender-female" })
                    <label class="forcheckbox" for="gender-female">@T("Account.Fields.Gender.Female")</label>
                </div>
                        }
                <div class="profile_cmb1">
                    @Html.LabelFor(model => model.FirstName, new { @class = "profile_cmb1_left" }, ":")
                    @Html.TextBoxFor(model => model.FirstName, new { @class = "form-control" })
                    <div class="profile_cmb1_right">
                        @Html.RequiredHint()
                        @Html.ValidationMessageFor(model => model.FirstName)
                    </div>
                </div>
                <div class="profile_cmb1">
                    @Html.LabelFor(model => model.LastName, new { @class = "profile_cmb1_left" }, ":")
                    @Html.TextBoxFor(model => model.LastName, new { @class = "form-control" })
                    <div class="profile_cmb1_right">
                        @Html.RequiredHint()
                        @Html.ValidationMessageFor(model => model.LastName)
                    </div>
                </div>
                @if (Model.DateOfBirthEnabled)
                        {
                <div class="profile_cmb1">
                    <label class="profile_cmb1_left">@T("Account.Fields.DateOfBirth"):</label>
                    @Html.DatePickerDropDowns(Html.FieldNameFor(x => x.DateOfBirthDay),
                                                                      Html.FieldNameFor(x => x.DateOfBirthMonth),
                                                                      Html.FieldNameFor(x => x.DateOfBirthYear),
                                                                      DateTime.Now.Year - 110,
                                                                      DateTime.Now.Year,
                                                                      Model.DateOfBirthDay,
                                                                      Model.DateOfBirthMonth,
                                                                      Model.DateOfBirthYear)
                    @Html.ValidationMessageFor(model => model.DateOfBirthDay)
                    @Html.ValidationMessageFor(model => model.DateOfBirthMonth)
                    @Html.ValidationMessageFor(model => model.DateOfBirthYear)
                </div>
                        }
                <div class="profile_cmb1">
                    @Html.LabelFor(model => model.Email, new { @class = "profile_cmb1_left" }, ":")
                    @Html.TextBoxFor(model => model.Email, new { @class = "form-control" })
                    <div class="profile_cmb1_right">
                        @Html.RequiredHint()
                        @Html.ValidationMessageFor(model => model.Email)
                    </div>
                </div>

                @if (Model.UsernamesEnabled)
                        {
                            if (Model.AllowUsersToChangeUsernames)
                            {
                <div class="profile_cmb1">
                    @Html.LabelFor(model => model.Username, new { @class = "profile_cmb1_left" }, ":")
                    @Html.TextBoxFor(model => model.Username, new { @class = "form-control" })
                    <div class="profile_cmb1_right">
                        @Html.RequiredHint()
                        @Html.ValidationMessageFor(model => model.Username)
                        @if (Model.CheckUsernameAvailabilityEnabled)
                                        {
                            @Html.Partial("_CheckUsernameAvailability")
                                        }
                    </div>
                </div>
                            }
                            else
                            {
                <div class="profile_cmb1">
                    @Html.LabelFor(model => model.Username, new { @class = "profile_cmb1_left" }, ":")
                    <lable>@Model.Username</lable>
                </div>
                            }
                        }
            </div>
            if (Model.PhoneEnabled || Model.FaxEnabled)
            {
                <div class="checkout_title">
                    @T("Account.YourContactInformation")
                    <label />
                </div>
                <div class="form-fields">
                    @if (Model.PhoneEnabled)
                        {
                        <div class="profile_cmb1">
                            @Html.LabelFor(model => model.Phone, new { @class = "profile_cmb1_left" }, ":")
                            @Html.TextBoxFor(model => model.Phone, new { @class = "form-control" })
                            <div class="profile_cmb1_right">
                                @if (Model.PhoneRequired)
                                    {
                                    @Html.RequiredHint()
                                    }
                                @Html.ValidationMessageFor(model => model.Phone)
                            </div>
                        </div>
                        }
                    @if (Model.FaxEnabled)
                        {
                        <div class="profile_cmb1">
                            @Html.LabelFor(model => model.Fax, new { @class = "profile_cmb1_left" }, ":")
                            @Html.TextBoxFor(model => model.Fax, new { @class = "form-control" })
                            <div class="profile_cmb1_right">
                                @if (Model.FaxRequired)
                                    {
                                    @Html.RequiredHint()
                                    }
                                @Html.ValidationMessageFor(model => model.Fax)
                            </div>
                        </div>
                        }
                </div>
            }
            if (Model.NewsletterEnabled)
            {
                <div class="checkout_title">
                    @T("Account.Options")
                    <label />
                </div>
                <div class="form-fields">
                    <div class="profile_cmb1">
                        @Html.LabelFor(model => model.Newsletter, new { @class = "profile_cmb1_left" }, ":")
                        @Html.EditorFor(model => model.Newsletter, new { @class = "form-control" })
                        <div class="profile_cmb1_right">
                            @Html.ValidationMessageFor(model => model.Newsletter)
                        </div>
                    </div>
                </div>
            }

            <div class="profile_cmb2">
                <input type="submit" value="@T("Common.Save")" name="save-info-button" class="profile_cmb1_sub1" />
            </div>
        }
    </div>
</div>
